package com.openclassrooms.projectInit.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.openclassrooms.projectInit.TDO.EnrollmentDTO;
import com.openclassrooms.projectInit.TDO.StudentDTO;
import com.openclassrooms.projectInit.model.Enrollment;
import com.openclassrooms.projectInit.model.Student;
import com.openclassrooms.projectInit.model.parameterId;
import com.openclassrooms.projectInit.service.EnrollmentService;
import com.openclassrooms.projectInit.service.StudentService;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("enrollment")
public class EnrollmentController {
	
	@Autowired
	private EnrollmentService  enrollmentService;
	
	@Autowired
	private StudentService studentService;
	
	@Autowired
	private ModelMapper mapper;
	
	@GetMapping("/{id}")
	@ResponseBody
	 public EnrollmentDTO findById(@PathVariable int id){
			Optional<Enrollment> enrollment= enrollmentService. getEnrollment(id);
			if(!enrollment.isEmpty()) {
				EnrollmentDTO enrollmentDTO = mapper.map(enrollment.get(), EnrollmentDTO.class);

				return enrollmentDTO;
			}else {
				throw new ResponseStatusException(HttpStatus.NOT_FOUND, "ID Not Found");	
			}
	}
	
	 @GetMapping()
	 public  List<EnrollmentDTO> findAll() {
		 
		 Iterable<Enrollment> enrollments = enrollmentService.getEnrollments();
				List<EnrollmentDTO> EnrollmentDTOList = new ArrayList<>();
				for (Enrollment enrollment : enrollments) {
					EnrollmentDTOList.add(mapper.map(enrollment, EnrollmentDTO.class));	
				}
				return  EnrollmentDTOList;
		
	 }
	
	 @PostMapping("/enroll")
	 public EnrollmentDTO addEnrollment(@RequestBody parameterId param){
		Enrollment en = this.enrollmentService.createEnrollment(param);
		 EnrollmentDTO enrollmentDTO = mapper.map(en, EnrollmentDTO.class);
		 return enrollmentDTO;
	 }
	
	 @DeleteMapping("/enroll/{id}")
	 @ResponseBody
	 public String deleteEnrollment(@PathVariable int id) {
		this.enrollmentService.deleteEnrollment(id);
		return "succefull adding";
	 }
	
	 @PutMapping("/add/{id}")
	 public  EnrollmentDTO updateEnrollment(@RequestBody EnrollmentDTO enrollmentDTO,  @PathVariable int id) {
		 Optional<Enrollment> st = this.enrollmentService.getEnrollment(id);
	
		 if(!st.isEmpty()) { 
			 Enrollment enrollment = mapper.map(enrollmentDTO, Enrollment.class);
			 enrollment.setId(id);
			 enrollment = this.enrollmentService.updateStudent(enrollment, id);			 
			 return mapper.map(enrollment, EnrollmentDTO.class);
		 }
		 else {
			 	throw new ResponseStatusException(HttpStatus.NOT_FOUND, "ID Not Found");	
			 }
			
		 }
		
	@GetMapping("/average/{id}")
	@ResponseBody
	public float getAverage(@PathVariable int id) {
		if(this.studentService.verify(id)) 
			return this.enrollmentService.getAverageToDate(id);
		
		else
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "ID Not Found");
			
		
	}
		 
}
