package com.openclassrooms.projectInit.controller;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.openclassrooms.projectInit.TDO.EnrollmentDTO;
import com.openclassrooms.projectInit.TDO.SeminarDTO;
import com.openclassrooms.projectInit.model.Enrollment;
import com.openclassrooms.projectInit.model.Parameter;
import com.openclassrooms.projectInit.model.Seminar;
import com.openclassrooms.projectInit.model.parameterId;
import com.openclassrooms.projectInit.service.EnrollmentService;
import com.openclassrooms.projectInit.service.SeminarService;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("seminar")
public class SeminarController {
	@Autowired
	private ModelMapper mapper;

	@Autowired
	private SeminarService seminarService;
	
	
	
	 @GetMapping()
	 public Iterable<SeminarDTO> findAll() {
		 Iterable<Seminar> seminars = seminarService.getSeminars();
		 Collection<SeminarDTO> seminarDTOList = new ArrayList<>();
		 
		 for (Seminar seminar : seminars ) {
			 seminarDTOList.add(mapper.map(seminar, SeminarDTO.class));	
		}
	       return seminarDTOList;
	 }
	
	 
	 @GetMapping("/{id}")
	 @ResponseBody
	 public SeminarDTO findById(@PathVariable int id){
		 Optional<Seminar> seminar = seminarService.getSeminar(id);
		 SeminarDTO seminarDTO = mapper.map(seminar.get(),SeminarDTO.class);
		 return seminarDTO;
	 }
	 
	 @PostMapping("/sem")
	 public SeminarDTO addSeminar (@RequestBody Seminar seminar){
		 this.seminarService.createSeminar(seminar);
		 SeminarDTO seminarDTO = mapper.map(seminar, SeminarDTO.class);
		 return seminarDTO;
	 }
	 
	 @PostMapping("/add")
	 public EnrollmentDTO addEnrollment(@RequestBody parameterId param){
		Enrollment en = this.seminarService.addStudent(param);
		 EnrollmentDTO enrollmentDTO = mapper.map(en, EnrollmentDTO.class);
		 return enrollmentDTO;
	 }
	 
	 @PostMapping("/addProfessor")
		public String addProfessor(@RequestBody Parameter params) {
			return this.seminarService.addProfessorToSeminar(params);
		}
	 
	 @PostMapping("/addStudent")
		public String addStudent(@RequestBody parameterId param) {
			this.seminarService.addStudentToSeminar(param);
			return "Succesfull";
		}
	 
	 @PutMapping("/sem/{id}")
	 public  SeminarDTO updateSeminar(@RequestBody SeminarDTO seminarDTO,  @PathVariable int id) {
		 Optional<Seminar> st = this.seminarService.getSeminar(id);
	
		 if(!st.isEmpty()) {
			 Seminar seminar = mapper.map(seminarDTO, Seminar.class);
			 seminar.setId(id);
			 seminar = this.seminarService.updateStudent(seminar, id);			 
			 return mapper.map(seminar, SeminarDTO.class);
		 }
		 else { throw new ResponseStatusException(HttpStatus.NOT_FOUND, "ID Not Found"); }
		 
	 }
	 
	 @DeleteMapping("/delete/{id}")
	 @ResponseBody
	 public void deleteSeminar(@PathVariable int id) {
		 this.seminarService.deleteSeminar(id);
	}
	
	 @PostMapping("/addStudentToSeminar")
	 public EnrollmentDTO addStudentToSeminar (@RequestBody parameterId param){
		Enrollment en = this.seminarService.addStudent(param);
		 EnrollmentDTO enrollmentDTO = mapper.map(en, EnrollmentDTO.class);
		 return enrollmentDTO;
	 }
	 
	 }
